version: '3.8'

services:
  mongodb:
    image: mongo:latest
    container_name: rt-basic-archi-mongodb-prod
    restart: always
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-rt_basic_archi}
    volumes:
      - mongodb_data_prod:/data/db
      - mongodb_config_prod:/data/configdb
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  api-service:
    build:
      context: .
      dockerfile: packages/api-service/Dockerfile
    container_name: rt-basic-archi-api-prod
    restart: always
    ports:
      - '3001:3001'
    environment:
      NODE_ENV: production
      PORT: ${API_PORT:-3001}
      MONGODB_URI: mongodb://${MONGO_USERNAME:-admin}:${MONGO_PASSWORD:-password}@mongodb:27017/${MONGO_DATABASE:-rt_basic_archi}?authSource=admin
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "require('http').get('http://localhost:3001/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  client:
    build:
      context: .
      dockerfile: packages/client/Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001}
    container_name: rt-basic-archi-client-prod
    restart: always
    ports:
      - '3000:3000'
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001}
    depends_on:
      api-service:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "require('http').get('http://localhost:3000', (r) => process.exit(r.statusCode === 200 ? 0 : 1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data_prod:
    driver: local
  mongodb_config_prod:
    driver: local

networks:
  app-network:
    driver: bridge
